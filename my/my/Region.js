// Generated by CoffeeScript 1.7.1
require(function(geom) {
  var Region;
  return Region = (function() {
    function Region(stage, x, y, w, h) {
      this.stage = stage;
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      if (this.x < 0) {
        this.w += this.x;
        this.x = 0;
      }
      if (this.y < 0) {
        this.h += this.y;
        this.y = 0;
      }
      if (this.x + this.w > this.stage.w) {
        this.w = this.stage.w - this.x;
      }
      if (this.y + this.h > this.stage.h) {
        this.h = this.stage.h - this.y;
      }
      if (this.w < 0) {
        this.w = 0;
      }
      if (this.h < 0) {
        this.h = 0;
      }
    }

    Region.prototype.at = function(p) {
      if (this.isInside(p)) {
        return this.stage.at(p);
      } else {
        return null;
      }
    };

    Region.prototype.loc = function(p) {
      if (this.isInside(p)) {
        return this.stage.loc(p);
      } else {
        return null;
      }
    };

    Region.prototype.isInside = function(p) {
      var _ref, _ref1;
      return (this.x <= (_ref = p.x) && _ref < this.x + this.w) && (this.y <= (_ref1 = p.y) && _ref1 < this.y + this.h);
    };

    Region.prototype.randomLocation = function() {
      return this.loc(pt(randomBetween(this.x, this.x + this.w - 1), randomBetween(this.y, this.y + this.h - 1)));
    };

    Region.prototype.randomLocationWhere = function(predicate) {
      var i, res, _i;
      if (this.w * this.h > 50) {
        for (i = _i = 0; _i < 50; i = ++_i) {
          res = this.randomLocation();
          if (predicate(res)) {
            return res;
          }
        }
      }
      return randomFrom(this.locationsWhere(predicate));
    };

    Region.prototype.iter = function(fn) {
      var x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
      for (y = _i = _ref = this.y, _ref1 = this.y + this.h; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
        for (x = _j = _ref2 = this.x, _ref3 = this.x + this.w; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
          fn(this.loc(pt(x, y)));
        }
      }
    };

    Region.prototype.locations = function() {
      var res, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
      res = [];
      for (y = _i = _ref = this.y, _ref1 = this.y + this.h; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
        for (x = _j = _ref2 = this.x, _ref3 = this.x + this.w; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
          res.push(this.loc(pt(x, y)));
        }
      }
      return res;
    };

    Region.prototype.locationsWhere = function(predicate) {
      var loc, res, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
      res = [];
      for (y = _i = _ref = this.y, _ref1 = this.y + this.h; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
        for (x = _j = _ref2 = this.x, _ref3 = this.x + this.w; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
          loc = this.loc(pt(x, y));
          if (predicate(loc)) {
            res.push(loc);
          }
        }
      }
      return res;
    };

    Region.prototype.insideArea = function(margin) {
      if (margin == null) {
        margin = 1;
      }
      return new Region(this.stage, this.x + margin, this.y + margin, this.w - margin * 2, this.h - margin * 2);
    };

    Region.prototype.checkConnectivity = function() {
      var totalPassable, visited;
      totalPassable = 0;
      this.iter(function(l) {
        if (l.cell().isPassable()) {
          return totalPassable += 1;
        }
      });
      visited = 0;
      this.bfs(this.randomLocationWhere(function(l) {
        return l.cell().isPassable();
      }), function(l) {
        if (l.cell().isPassable()) {
          visited += 1;
          return true;
        } else {
          return false;
        }
      });
      return visited === totalPassable;
    };

    Region.prototype.key = function(p) {
      return (p.y - this.y) * this.w + (p.x - this.x);
    };

    Region.prototype.bfs = function(start, func) {
      var been, cur, p, queue, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
      been = [];
      been[this.key(start)] = true;
      queue = [start];
      while (queue.length > 0) {
        cur = queue.shift();
        if (func(this.loc(cur))) {
          for (y = _i = _ref = cur.y - 1, _ref1 = cur.y + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
            for (x = _j = _ref2 = cur.x - 1, _ref3 = cur.x + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
              p = pt(x, y);
              if (this.isInside(p) && !been[this.key(p)]) {
                been[this.key(p)] = true;
                queue.push(p);
              }
            }
          }
        }
      }
    };

    Region.prototype.toString = function() {
      var columns, rows, x, y;
      rows = (function() {
        var _i, _ref, _ref1, _results;
        _results = [];
        for (y = _i = _ref = this.y, _ref1 = this.y + this.h; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
          columns = (function() {
            var _j, _ref2, _ref3, _results1;
            _results1 = [];
            for (x = _j = _ref2 = this.x, _ref3 = this.x + this.w; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; x = _ref2 <= _ref3 ? ++_j : --_j) {
              _results1.push(this.at(pt(x, y)).toString());
            }
            return _results1;
          }).call(this);
          _results.push(columns.join(''));
        }
        return _results;
      }).call(this);
      return rows.join('\n');
    };

    return Region;

  })();
});
