// Generated by CoffeeScript 1.7.1
require(function(geom, Command) {
  var Keys, PlayerControls, castMap, moveMap, nearestTarget;
  Keys = {
    LU: 36,
    UP: 38,
    RU: 33,
    LEFT: 37,
    RIGHT: 39,
    LD: 35,
    DOWN: 40,
    RD: 34,
    SPACE: 32,
    NUM5: 12,
    1: 49,
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    Q: 81,
    W: 87,
    E: 69,
    A: 65,
    S: 83,
    D: 68,
    Z: 90,
    X: 88,
    C: 67,
    0: 48,
    1: 49,
    2: 50,
    3: 51,
    4: 52,
    5: 53,
    6: 54,
    7: 55,
    8: 56,
    9: 57
  };
  moveMap = (function() {
    var k, v, _keyMap;
    _keyMap = {
      LU: [-1, -1],
      UP: [0, -1],
      RU: [1, -1],
      LEFT: [-1, 0],
      NUM5: [0, 0],
      RIGHT: [1, 0],
      LD: [-1, 1],
      DOWN: [0, 1],
      RD: [1, 1],
      Q: [-1, -1],
      W: [0, -1],
      E: [1, -1],
      A: [-1, 0],
      S: [0, 1],
      D: [1, 0],
      Z: [-1, 1],
      X: [0, 1],
      C: [1, 1],
      SPACE: [0, 0]
    };
    moveMap = {};
    for (k in _keyMap) {
      v = _keyMap[k];
      moveMap[Keys[k]] = v;
    }
    return moveMap;
  })();
  castMap = (function() {
    var i, _i;
    castMap = {};
    for (i = _i = 1; _i <= 10; i = ++_i) {
      castMap[Keys[i % 10]] = i - 1;
    }
    return castMap;
  })();
  nearestTarget = function(src, targets) {
    return _.min(targets, function(t) {
      return src.loc.distance2(t.loc);
    });
  };
  return PlayerControls = (function() {
    function PlayerControls(game, view) {
      this.game = game;
      this.view = view;
      this.lastCommand = null;
      this.setNormalMode();
      $((function(_this) {
        return function() {
          $(document).keydown(function(e) {
            return _this.keydownHandler(e.which);
          });
          return $(document).keyup(function(e) {
            return _this.keyupHandler(e.which);
          });
        };
      })(this));
    }

    PlayerControls.prototype.setNormalMode = function() {
      this.keydownHandler = this.normalKeydownHandler;
      return this.keyupHandler = this.normalKeyupHandler;
    };

    PlayerControls.prototype.normalKeydownHandler = function(key) {
      var target, targets, x, y, _ref;
      if (key in moveMap) {
        _ref = moveMap[key], x = _ref[0], y = _ref[1];
        this.register(Command.MOVE, {
          to: pt(x, y)
        });
        return false;
      } else if (key in castMap) {
        targets = this.game.p.targets(8);
        if (targets.length) {
          target = nearestTarget(this.game.p, targets);
          this.lastTarget = target;
          this.view.setTarget(target.loc);
          this.setTargetingMode();
        }
        return false;
      }
    };

    PlayerControls.prototype.normalKeyupHandler = function(key) {
      var _ref;
      if (key in moveMap && ((_ref = this.lastCommand) != null ? _ref.id : void 0) === Command.MOVE) {
        return this.lastCommand = null;
      }
    };

    PlayerControls.prototype.setTargetingMode = function() {
      return this.keydownHandler = this.targetingKeydownHandler;
    };

    PlayerControls.prototype.targetingKeydownHandler = function(key) {
      var dx, dy, t, target, targets, _ref;
      switch (false) {
        case !(key in moveMap):
          _ref = moveMap[key], dx = _ref[0], dy = _ref[1];
          targets = this.game.p.targets(8);
          targets = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = targets.length; _i < _len; _i++) {
              t = targets[_i];
              if ((dx === 0 || sign(t.loc.x - this.lastTarget.loc.x) === dx) && (dy === 0 || sign(t.loc.y - this.lastTarget.loc.y) === dy)) {
                _results.push(t);
              }
            }
            return _results;
          }).call(this);
          if (targets.length) {
            target = nearestTarget(this.game.p, targets);
            this.lastTarget = target;
            this.view.setTarget(target.loc);
          }
          return false;
        case key !== Keys.ENTER:
          this.register(Command.CAST, {
            target: this.lastTarget
          });
          this.view.clearTarget();
          this.setNormalMode();
          return false;
        case key !== Keys.ESC:
          this.view.clearTarget();
          this.setNormalMode();
          return false;
      }
    };

    PlayerControls.prototype.onInput = function(cb) {
      if (this.onInputCallbacks == null) {
        this.onInputCallbacks = [];
      }
      this.onInputCallbacks.push(cb);
    };

    PlayerControls.prototype.triggerOnInput = function() {
      var cb, _i, _len, _ref;
      _ref = this.onInputCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cb = _ref[_i];
        cb();
      }
    };

    PlayerControls.prototype.register = function(commandId, data) {
      this.lastCommand = new Command(commandId, data);
      return this.triggerOnInput();
    };

    PlayerControls.prototype.getLastCommand = function() {
      var res, _ref;
      res = this.lastCommand;
      if (((_ref = this.lastCommand) != null ? _ref.id : void 0) !== Command.MOVE) {
        this.lastCommand = null;
      }
      return res;
    };

    return PlayerControls;

  })();
});
