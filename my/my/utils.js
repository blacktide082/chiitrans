// Generated by CoffeeScript 1.7.1
(function() {
  var GenericSet, currentAnimation, startTime, timing, _id, _ref;
  globals.polyfill = function(cls, methods) {
    var name, val;
    for (name in methods) {
      val = methods[name];
      if (cls.prototype[name] == null) {
        Object.defineProperty(cls.prototype, name, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: val
        });
      }
    }
  };
  polyfill(String, {
    endsWith: function(searchString) {
      if (this.length < searchString.length) {
        return false;
      } else {
        return this.substr(this.length - searchString.length) === searchString;
      }
    },
    startsWith: function(searchString) {
      if (this.length < searchString.length) {
        return false;
      } else {
        return this.substr(0, searchString.length) === searchString;
      }
    }
  });
  globals.random = function(x) {
    return Math.floor(Math.random() * x);
  };
  globals.randomBetween = function(x, y) {
    return x + random(y - x + 1);
  };
  globals.randomFrom = function(a) {
    return a[random(a.length)];
  };
  globals.chance = function(x) {
    return Math.random() < x;
  };
  globals.coinflip = function() {
    return chance(1 / 2);
  };
  globals.attempt = function(maxAttempts, fn) {
    var i, _i;
    for (i = _i = 0; 0 <= maxAttempts ? _i < maxAttempts : _i > maxAttempts; i = 0 <= maxAttempts ? ++_i : --_i) {
      if (fn(i)) {
        return true;
      }
    }
    return false;
  };
  globals.repeat = function(n, fn) {
    var i, _i;
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      fn(i);
    }
  };
  _id = 0;
  globals.nextId = function() {
    return ++_id;
  };
  globals.isInt = function(n) {
    var d;
    d = n - Math.floor(n);
    return d <= 1e-3 || (1 - d) <= 1e-3;
  };
  globals.profile = function(id, fn) {
    var ctr, f, res, s, _ctr;
    s = _.now();
    _ctr = 0;
    ctr = function() {
      return _ctr += 1;
    };
    res = fn(ctr);
    f = _.now() - s;
    console.log("" + id + ": time=" + f + " ctr=" + _ctr);
    return res;
  };
  globals.sign = function(x) {
    switch (false) {
      case !(x < 0):
        return -1;
      case !(x > 0):
        return 1;
      default:
        return 0;
    }
  };
  globals.CanvasExtensions = {
    clear: function() {
      return this.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
  };
  globals.getCanvasContext = function(cvs) {
    var ctx, k, v;
    cvs = $(cvs)[0];
    ctx = cvs.getContext('2d');
    for (k in CanvasExtensions) {
      v = CanvasExtensions[k];
      ctx[k] = v;
    }
    return ctx;
  };
  globals.GenericSet = GenericSet = (function() {
    function GenericSet() {
      this.store = {};
    }

    GenericSet.prototype.key = function() {
      throw new Error("You must override key method!");
    };

    GenericSet.prototype.add = function(it) {
      var key;
      key = this.key(it);
      if (key in this.store) {
        return false;
      } else {
        this.store[key] = it;
        return true;
      }
    };

    GenericSet.prototype.has = function(it) {
      return this.key(it) in this.store;
    };

    GenericSet.prototype.toArray = function() {
      return _.values(this.store);
    };

    return GenericSet;

  })();
  if (globals.requestAnimationFrame == null) {
    globals.requestAnimationFrame = (_ref = globals.mozRequestAnimationFrame) != null ? _ref : globals.webkitRequestAnimationFrame;
  }
  startTime = null;
  currentAnimation = null;
  requestAnimationFrame(timing = function(t) {
    var tmp;
    if (currentAnimation !== null) {
      tmp = currentAnimation;
      currentAnimation = null;
      tmp(t);
    }
    startTime = t;
    return requestAnimationFrame(timing);
  });
  globals.animate = function(duration, animFunc, callback) {
    var fn, start;
    start = null;
    return currentAnimation = fn = function(t) {
      var time;
      if (start == null) {
        if (startTime == null) {
          start = t;
        } else {
          start = startTime;
        }
      }
      time = (t - start) / duration;
      if (time >= 1) {
        time = 1;
        animFunc(time);
        if (callback != null) {
          callback();
        }
      } else {
        animFunc(time);
        currentAnimation = fn;
      }
    };
  };
  return globals.interpolate = function(x, values) {
    var i;
    if (values.length <= 1) {
      return values[0];
    } else {
      x = x * (values.length - 1);
      i = Math.floor(x);
      x = x - i;
      if (i === values.length - 1) {
        return values[values.length - 1];
      } else {
        return values[i] + x * (values[i + 1] - values[i]);
      }
    }
  };
})();
