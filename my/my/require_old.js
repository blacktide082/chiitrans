// Generated by CoffeeScript 1.7.1
var __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  var RequireProperties, Status, getFunctionBody, getModuleSource, getParamNames, getUniqueNames, globals, internalRequire, loadModule, loadModuleInContext, loadModules, mapStructure, modules, newRequireContext, runModule, _require;
  globals = window;
  globals.globals = globals;
  Status = {
    LOADING: 0,
    COMPLETED: 1
  };
  modules = {};
  RequireProperties = {
    modules: modules,
    path: null,
    moduleName: null,
    find: function(name) {
      return this.defaults.find.call(this, name);
    },
    getModuleName: function() {
      var _ref;
      return (_ref = this.moduleName) != null ? _ref : "(inline)";
    }
  };
  newRequireContext = function(options) {
    var k, res, v;
    res = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _require(res, args);
    };
    res.__proto__ = RequireProperties;
    if (options != null) {
      for (k in options) {
        v = options[k];
        res[k] = v;
      }
    }
    return res;
  };
  RequireProperties.defaults = newRequireContext({
    find: function(name) {
      var path, _ref, _ref1;
      path = (_ref = (_ref1 = this.path) != null ? _ref1 : this.defaults.path) != null ? _ref : '';
      if (path.length > 0 && path.charAt(path.length - 1) !== '/') {
        path += '/';
      }
      return "" + path + name + ".js";
    }
  });
  globals.require = newRequireContext();
  getUniqueNames = function(arr) {
    var res, _rec;
    res = {};
    _rec = function(arr) {
      var name, _i, _len;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        name = arr[_i];
        if (Array.isArray(name)) {
          _rec(name);
        } else {
          res[name] = true;
        }
      }
    };
    _rec(arr);
    return Object.keys(res);
  };
  mapStructure = function(arr, fn) {
    var _rec;
    _rec = function(arr) {
      var it, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        it = arr[_i];
        if (Array.isArray(it)) {
          _results.push(_rec(it));
        } else {
          _results.push(fn(it));
        }
      }
      return _results;
    };
    return _rec(arr);
  };
  getParamNames = function(fn) {
    var res;
    res = fn.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg, '').match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1].split(/,/);
    if (res.length === 1 && res[0] === "") {
      return [];
    } else {
      return res;
    }
  };
  getFunctionBody = function(fn) {
    var srcWithoutComments;
    srcWithoutComments = fn.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
    return srcWithoutComments.substring(srcWithoutComments.indexOf('{'), srcWithoutComments.lastIndexOf('}') + 1);
  };
  getModuleSource = function(url, cb) {
    console.log("Loading module " + url);
    return $.ajax({
      url: url + "?" + $.now(),
      dataType: 'text',
      success: cb,
      error: function(_, status) {
        console.error("Error loading module " + url + ": " + status);
        return cb(null);
      }
    });
  };
  _require = function(ctx, args) {
    var arg, argMap, func, i, paramNames, _i, _len;
    if (args.length === 0) {
      func = function() {};
    } else {
      func = args.pop();
    }
    if (typeof func !== "function") {
      args.push(func);
      func = function() {};
    }
    paramNames = getParamNames(func);
    if (args.length === 0) {
      args = paramNames;
    }
    args = mapStructure(args, function(it) {
      return ctx.find(it);
    });
    if (ctx.moduleName != null) {
      argMap = {};
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        if (!Array.isArray(arg) && (paramNames[i] != null)) {
          argMap[arg] = paramNames[i];
        }
      }
      return internalRequire(ctx, args, argMap, func);
    } else {
      return loadModules(ctx, args, func);
    }
  };
  loadModules = function(ctx, args, func) {
    var counter, dict, done, name, names, _fn, _i, _len;
    names = getUniqueNames(args);
    dict = {};
    counter = names.length;
    done = function() {
      var res;
      res = mapStructure(args, (function(_this) {
        return function(it) {
          return dict[it];
        };
      })(this));
      func.apply(null, res);
    };
    _fn = function(name) {
      return loadModule(name, function(m) {
        dict[name] = m;
        counter -= 1;
        if (counter <= 0) {
          return done();
        }
      });
    };
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      _fn(name);
    }
  };
  internalRequire = function(ctx, args, argMap, func) {
    var argName, name, names, _i, _len;
    for (name in argMap) {
      argName = argMap[name];
      ctx.loadingData.argMap[name] = argName;
    }
    ctx.loadingData.requires.push([args, func]);
    names = getUniqueNames(args);
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      ctx.loadingData.dependencies[name] = true;
    }
  };
  loadModuleInContext = function(name, context, cb) {
    var loadingData;
    if (context.loading[name] != null) {
      cb();
    } else {
      if (modules[name] != null) {
        if (modules[name].status === Status.LOADING) {
          modules[name].callbacks.push(cb);
        } else {
          cb();
        }
      } else {
        modules[name] = {
          status: Status.LOADING,
          module: null,
          callbacks: []
        };
        context.moduleNames.push(name);
        context.loading[name] = {
          requires: []
        };
        loadingData = {
          requires: context.loading[name].requires,
          argMap: context.argMap,
          dependencies: {}
        };
        getModuleSource(name, function(src) {
          var counter, depName, wrapper, _i, _len, _ref;
          if (src != null) {
            wrapper = new Function('require', src);
            wrapper(newRequireContext({
              moduleName: name,
              loadingData: loadingData
            }));
          }
          loadingData.dependencies = Object.keys(loadingData.dependencies);
          counter = loadingData.dependencies.length;
          if (counter === 0) {
            cb();
          } else {
            _ref = loadingData.dependencies;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              depName = _ref[_i];
              loadModuleInContext(depName, context, function() {
                counter -= 1;
                if (counter <= 0) {
                  return cb();
                }
              });
            }
          }
        });
      }
    }
  };
  runModule = function(name, fn) {
    var e;
    try {
      return fn();
    } catch (_error) {
      e = _error;
      console.error("Module " + name + ": " + e.message + "\n" + e.stack, e);
      return null;
    }
  };
  return loadModule = function(name, cb) {
    var context;
    context = {
      loading: {},
      moduleNames: [],
      argMap: {}
    };
    loadModuleInContext(name, context, function() {
      var arg, args, body, data, exports, fixedParams, fixedValues, footer, func, header, i, loader, loaderFunc, paramName, params, varName, _cb, _i, _id, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      if (context.moduleNames.length > 0) {
        context.moduleNames.reverse();
        loader = [];
        _id = 0;
        _ref = context.moduleNames;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          data = context.loading[name];
          varName = context.argMap[name];
          if (varName == null) {
            _id += 1;
            varName = "_module" + _id;
            context.argMap[name] = varName;
          }
          if (data.requires.length === 0) {
            loader.push("var " + varName + " = null;\n");
            continue;
          }
          header = "var " + varName + " = _exports." + varName + " = _runModule('" + name + "', function(){\nvar " + varName + " = ";
          body = [];
          _ref1 = data.requires;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            _ref2 = _ref1[_j], args = _ref2[0], func = _ref2[1];
            params = getParamNames(func);
            fixedParams = [];
            fixedValues = [];
            for (i = _k = 0, _len2 = args.length; _k < _len2; i = ++_k) {
              arg = args[i];
              paramName = params[i];
              if (paramName != null) {
                if (Array.isArray(arg)) {
                  fixedParams.push(paramName);
                  fixedValues.push(JSON.stringify(mapStructure(arg, (function(_this) {
                    return function(it) {
                      return "modules['" + it + "'].module";
                    };
                  })(this))).replace(/\"/g, ""));
                } else if (!(__indexOf.call(context.moduleNames, arg) >= 0)) {
                  fixedParams.push(paramName);
                  fixedValues.push("modules['" + arg + "'].module");
                } else if (paramName !== context.argMap[arg]) {
                  fixedParams.push(paramName);
                  fixedValues.push(context.argMap[arg]);
                }
              }
            }
            body.push("(function(" + (fixedParams.join(', ')) + ")" + (getFunctionBody(func)) + ")(" + (fixedValues.join(', ')) + ");\n");
          }
          footer = "return " + varName + ";\n});";
          loader.push(header + body.join('') + footer);
        }
        loaderFunc = new Function('modules', '_exports', '_runModule', loader.join('\n'));
        exports = {};
        loaderFunc(modules, exports, runModule);
        _ref3 = context.moduleNames;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          name = _ref3[_l];
          modules[name].status = Status.COMPLETED;
          modules[name].module = exports[context.argMap[name]];
          _ref4 = modules[name].callbacks;
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            _cb = _ref4[_m];
            _cb(modules[name].module);
          }
          delete modules[name].callbacks;
        }
      }
      if (cb != null) {
        cb(modules[name].module);
      }
    });
  };
})();
