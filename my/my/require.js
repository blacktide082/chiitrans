// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

(function() {
  var RequireContext, Status, contexts, endsWith, getCurrentScriptName, getParamNames, getUniqueNames, globals, loadModule, mapStructure;
  globals = window;
  globals.globals = globals;
  Status = {
    LOADING: 0,
    COMPLETED: 1,
    INLINE: 2
  };
  contexts = {};
  endsWith = function(s, searchString) {
    if (s.length < searchString.length) {
      return false;
    } else {
      return s.substr(s.length - searchString.length) === searchString;
    }
  };
  getCurrentScriptName = function() {
    var e, err, first, k, last, line, lines, res, v, _ref;
    if (typeof document.currentScript !== 'undefined') {
      res = (_ref = document.currentScript) != null ? _ref.src : void 0;
    } else {
      err = null;
      try {
        throw new Error();
      } catch (_error) {
        e = _error;
        err = e;
      }
      lines = err.stack.split('\n');
      line = lines[lines.length - 1];
      if (line === '') {
        line = lines[lines.length - 2];
      }
      last = line.lastIndexOf(':', line.lastIndexOf(':') - 1);
      first = line.lastIndexOf('(') + 1;
      res = line.substring(first, last);
    }
    if ((res == null) || res === '') {
      return "(inline)";
    } else {
      for (k in contexts) {
        v = contexts[k];
        if (endsWith(res, k)) {
          return k;
        }
      }
    }
    return res;
  };
  RequireContext = (function() {
    RequireContext.prototype.contexts = contexts;

    RequireContext.prototype.path = null;

    function RequireContext(name) {
      this.name = name;
      this.module = {};
      this.status = Status.LOADING;
      this.callbacks = [];
      this.dependencies = [];
      if (this.defaults != null) {
        this.path = this.defaults.path;
      }
      this.loadingCounter = 1;
    }

    RequireContext.prototype.find = function(name) {
      return this.defaults.find.call(this, name);
    };

    RequireContext.prototype.isQuiet = function() {
      var _ref;
      return (_ref = this.quiet) != null ? _ref : this.defaults.quiet;
    };

    RequireContext.prototype.onload = function(fn) {
      if (this.status === Status.LOADING) {
        this.callbacks.push(fn);
      } else {
        fn();
      }
    };

    RequireContext.prototype.loadStarted = function() {
      return this.loadingCounter += 1;
    };

    RequireContext.prototype.loadFinished = function() {
      var cb, _i, _len, _ref;
      this.loadingCounter -= 1;
      if (this.loadingCounter <= 0) {
        this.status = Status.COMPLETED;
        _ref = this.callbacks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          cb();
        }
        delete this.callbacks;
        return true;
      } else {
        return false;
      }
    };

    RequireContext.prototype.dependsOn = function(name) {
      var been, _rec;
      been = {};
      _rec = function(ctx) {
        var dep, nextCtx, _i, _j, _len, _len1, _ref, _ref1;
        _ref = ctx.dependencies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dep = _ref[_i];
          if (dep === name) {
            return true;
          }
        }
        _ref1 = ctx.dependencies;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dep = _ref1[_j];
          if (!been[dep]) {
            been[dep] = true;
            nextCtx = contexts[dep];
            if (nextCtx != null) {
              if (_rec(nextCtx)) {
                return true;
              }
            }
          }
        }
        return false;
      };
      return _rec(this);
    };

    RequireContext.current = function() {
      var ctx, name;
      name = getCurrentScriptName();
      ctx = contexts[name];
      if (ctx == null) {
        ctx = new RequireContext(name);
        ctx.status = Status.INLINE;
        contexts[name] = ctx;
      }
      return ctx;
    };

    return RequireContext;

  })();
  RequireContext.prototype.defaults = new RequireContext("(defaults)");
  RequireContext.prototype.defaults.find = function(name) {
    var path, _ref, _ref1;
    path = (_ref = (_ref1 = this.path) != null ? _ref1 : this.defaults.path) != null ? _ref : '';
    if (path.length > 0 && path.charAt(path.length - 1) !== '/') {
      path += '/';
    }
    return "" + path + name + ".js";
  };
  getUniqueNames = function(arr) {
    var res, _rec;
    res = {};
    _rec = function(arr) {
      var name, _i, _len;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        name = arr[_i];
        if (Array.isArray(name)) {
          _rec(name);
        } else {
          res[name] = true;
        }
      }
    };
    _rec(arr);
    return Object.keys(res);
  };
  mapStructure = function(arr, fn) {
    var _rec;
    _rec = function(arr) {
      var it, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        it = arr[_i];
        if (Array.isArray(it)) {
          _results.push(_rec(it));
        } else {
          _results.push(fn(it));
        }
      }
      return _results;
    };
    return _rec(arr);
  };
  getParamNames = function(fn) {
    var res;
    res = fn.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg, '').match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1].split(/,/);
    if (res.length === 1 && res[0] === "") {
      return [];
    } else {
      return res;
    }
  };
  globals.require = function() {
    var args, counter, ctx, depName, depNames, doneLoading, func, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ctx = RequireContext.current();
    if (args.length === 0) {
      return ctx;
    }
    func = args.pop();
    if (typeof func !== "function") {
      args.push(func);
      func = function() {};
    }
    if (args.length === 0) {
      args = getParamNames(func);
    }
    args = mapStructure(args, function(it) {
      return ctx.find(it);
    });
    depNames = getUniqueNames(args);
    counter = depNames.length;
    ctx.loadStarted();
    doneLoading = function() {
      var res, values;
      values = mapStructure(args, function(it) {
        return contexts[it].module;
      });
      res = func.apply(ctx.module, values);
      if (res != null) {
        ctx.module = res;
      }
      return ctx.loadFinished();
    };
    if (counter === 0) {
      doneLoading();
    } else {
      ctx.dependencies = getUniqueNames(ctx.dependencies.concat(depNames));
      for (_i = 0, _len = depNames.length; _i < _len; _i++) {
        depName = depNames[_i];
        loadModule(depName, ctx, function() {
          counter -= 1;
          if (counter <= 0) {
            return doneLoading();
          }
        });
      }
    }
    return ctx;
  };
  return loadModule = function(name, parent, cb) {
    var ctx, sc;
    ctx = contexts[name];
    if (ctx != null) {
      if (ctx.dependsOn(parent.name)) {
        cb();
      } else {
        ctx.onload(cb);
      }
    } else {
      if (!(parent != null ? parent.isQuiet() : void 0)) {
        console.log("Loading module " + name + " from " + parent.name);
      }
      ctx = contexts[name] = new RequireContext(name);
      ctx.onload(cb);
      sc = document.createElement("script");
      sc.async = true;
      sc.src = name;
      sc.onerror = function() {
        console.error("FAILED to load module " + name + "!");
        return ctx.loadFinished();
      };
      sc.onload = function() {
        return ctx.loadFinished();
      };
      document.documentElement.appendChild(sc);
    }
  };
})();
