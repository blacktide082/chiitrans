// Generated by CoffeeScript 1.7.1
require(function(geom) {
  var makeCorridor, makeRandomRoom, makeTrail;
  makeTrail = function(region, x, y, len, num) {
    var cur, i, _i;
    cur = pt(x, y);
    for (i = _i = 0; 0 <= num ? _i < num : _i > num; i = 0 <= num ? ++_i : --_i) {
      cur = makeCorridor(region, cur, len);
    }
  };
  makeCorridor = function(region, st, len) {
    var cur, dir, i, next, randomDir, _i;
    randomDir = function(z, mz) {
      var ch;
      ch = (0.5 + z / mz) * 0.5;
      if (chance(ch)) {
        return -1;
      } else {
        return 1;
      }
    };
    if (coinflip()) {
      dir = pt(0, randomDir(st.y - region.y, region.h));
    } else {
      dir = pt(randomDir(st.x - region.x, region.w), 0);
    }
    if (dir.x === 0) {
      len = (Math.max(region.h / 8, 4)) | 0;
    } else {
      len = (Math.max(region.w / 8, 4)) | 0;
    }
    len = randomBetween(len / 2 | 0, len);
    cur = st;
    for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
      next = cur.plus(dir);
      if (!region.isInside(next)) {
        break;
      }
      if (region.isInside(next.plus(dir)) && region.at(next.plus(dir)).terrain === Terrain.FLOOR && !chance(INTERSECT_CHANCE)) {
        break;
      }
      cur = next;
      region.at(cur).terrain = Terrain.FLOOR;
    }
    return cur;
  };
  makeRandomRoom = function(region, maxWidth, maxHeight) {
    var isPassage, placeDoorLR, placeDoorUD, xd, yd;
    isPassage = function(p) {
      var _ref, _ref1;
      if ((_ref = (_ref1 = region.at(p)) != null ? _ref1.terrain : void 0) === Terrain.FLOOR || _ref === Terrain.DOOR || _ref === Terrain.WATER) {
        return 1;
      } else {
        return 0;
      }
    };
    placeDoorUD = function(p) {
      var _ref;
      if (((_ref = region.at(p)) != null ? _ref.terrain : void 0) === Terrain.FLOOR && !isPassage(p.plus(pt(-1, 0))) && !isPassage(p.plus(pt(1, 0)))) {
        return region.at(p).terrain = Terrain.DOOR;
      }
    };
    placeDoorLR = function(p) {
      var _ref;
      if (((_ref = region.at(p)) != null ? _ref.terrain : void 0) === Terrain.FLOOR && !isPassage(p.plus(pt(0, -1))) && !isPassage(p.plus(pt(0, 1)))) {
        return region.at(p).terrain = Terrain.DOOR;
      }
    };
    xd = randomBetween(2, maxWidth);
    yd = randomBetween(2, maxHeight);
    return attempt(10, function() {
      var passages, x, xf, xs, y, yf, ys, _i, _j, _k, _l, _m, _n;
      xs = region.x + random(region.w - xd + 1);
      ys = region.y + random(region.h - yd + 1);
      xf = xs + xd - 1;
      yf = ys + yd - 1;
      passages = 0;
      for (x = _i = xs; xs <= xf ? _i <= xf : _i >= xf; x = xs <= xf ? ++_i : --_i) {
        passages += isPassage(pt(x, ys - 1));
        passages += isPassage(pt(x, yf + 1));
      }
      for (y = _j = ys; ys <= yf ? _j <= yf : _j >= yf; y = ys <= yf ? ++_j : --_j) {
        passages += isPassage(pt(xs - 1, y));
        passages += isPassage(pt(xf + 1, y));
      }
      if (passages < 1 || passages > (3 + xd + yd) / 4) {
        return false;
      }
      for (x = _k = xs; xs <= xf ? _k <= xf : _k >= xf; x = xs <= xf ? ++_k : --_k) {
        for (y = _l = ys; ys <= yf ? _l <= yf : _l >= yf; y = ys <= yf ? ++_l : --_l) {
          region.at(pt(x, y)).terrain = Terrain.FLOOR;
        }
      }
      for (x = _m = xs; xs <= xf ? _m <= xf : _m >= xf; x = xs <= xf ? ++_m : --_m) {
        placeDoorUD(pt(x, ys - 1));
        placeDoorUD(pt(x, yf + 1));
      }
      for (y = _n = ys; ys <= yf ? _n <= yf : _n >= yf; y = ys <= yf ? ++_n : --_n) {
        placeDoorLR(pt(xs - 1, y));
        placeDoorLR(pt(xf + 1, y));
      }
      return true;
    });
  };
  return {
    makeTrail: makeTrail,
    makeRandomRoom: makeRandomRoom
  };
});
