// Generated by CoffeeScript 1.7.1
require(function() {
  var Mob;
  return Mob = (function() {
    Mob.prototype.glyph = '?';

    Mob.prototype.alive = true;

    Mob.prototype.kills = 0;

    Mob.prototype.visibilityRadius = 4;

    Mob.prototype.speed = 100;

    Mob.prototype.time = 0;

    Mob.prototype.loc = null;

    Mob.prototype.hp = 1;

    function Mob(options) {
      var k, v;
      this.id = nextId();
      if (options != null) {
        for (k in options) {
          v = options[k];
          this[k] = v;
        }
      }
    }

    Mob.prototype.speedFactor = function() {
      return 100 / this.speed;
    };

    Mob.prototype.stage = function() {
      return this.loc.stage;
    };

    Mob.prototype.cell = function() {
      return this.loc.cell();
    };

    Mob.prototype.moveTo = function(loc) {
      var d;
      d = this.loc.distance(loc);
      this.cell().mob = null;
      this.loc = loc;
      this.cell().mob = this;
      return this.time += 100 * this.speedFactor() * d;
    };

    Mob.prototype.canSee = function(where) {
      return this.stage().checkLOS(this.loc, where, this.visibilityRadius, function(c) {
        return !c.isOpaque();
      });
    };

    Mob.prototype.canShoot = function(where, radius) {
      return this.stage().checkLOS(this.loc, where, radius, function(c) {
        return !c.hasObstacle();
      });
    };

    Mob.prototype.attack = function(other) {
      other.hp -= 10;
      if (other.hp <= 0) {
        other.die();
        this.kills += 1;
      }
      return this.time += 100;
    };

    Mob.prototype.wait = function() {
      return this.time += 100 * this.speedFactor();
    };

    Mob.prototype.die = function() {
      if (this.alive) {
        this.alive = false;
        return this.triggerOnDeath();
      } else {
        throw new Error("WTF");
      }
    };

    Mob.prototype.onDeath = function(cb) {
      if (this.onDeathCallbacks == null) {
        this.onDeathCallbacks = [];
      }
      return this.onDeathCallbacks.push(cb);
    };

    Mob.prototype.triggerOnDeath = function() {
      var cb, _i, _len, _ref;
      _ref = this.onDeathCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cb = _ref[_i];
        cb();
      }
      return this.onDeathCallbacks = null;
    };

    Mob.prototype.targets = function(radius) {
      var res;
      res = [];
      this.loc.adjacentArea(radius).iter((function(_this) {
        return function(loc) {
          var mob;
          mob = loc.cell().mob;
          if ((mob != null) && mob !== _this && _this.canShoot(loc, radius)) {
            return res.push(mob);
          }
        };
      })(this));
      return res;
    };

    Mob.prototype.toString = function() {
      return this.glyph;
    };

    return Mob;

  })();
});
