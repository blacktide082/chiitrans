// Generated by CoffeeScript 1.7.1
require(function(geom, Region) {
  var Location;
  Location = (function() {
    function Location(stage, point) {
      this.stage = stage;
      this.point = point;
      if (this.point.point != null) {
        this.point = this.point.point;
      }
    }

    Location.prototype.plus = function(p) {
      return new Location(this.stage, this.point.plus(p));
    };

    Location.prototype.minus = function(p) {
      return new Location(this.stage, this.point.minus(p));
    };

    Location.prototype.mult = function(sx, sy) {
      return new Location(this.stage, this.point.mult(sx, sy));
    };

    Location.prototype.floor = function() {
      return new Location(this.stage, this.point.floor());
    };

    Location.prototype.distance = function(p) {
      return this.point.distance(p);
    };

    Location.prototype.distance2 = function(p) {
      return this.point.distance2(p);
    };

    Location.prototype.eq = function(loc) {
      return this.stage === loc.stage && this.point.eq(loc.point);
    };

    Location.prototype.toString = function() {
      return this.point.toString();
    };

    Location.prototype.toJSON = function() {
      return this.point.toJSON();
    };

    Location.prototype.cell = function() {
      return this.stage.at(this.point);
    };

    Location.prototype.adjacentArea = function(radiusX, radiusY) {
      if (radiusX == null) {
        radiusX = 1;
      }
      if (radiusY == null) {
        radiusY = radiusX;
      }
      return new Region(this.stage, this.x - radiusX, this.y - radiusY, radiusX * 2 + 1, radiusY * 2 + 1);
    };

    return Location;

  })();
  Object.defineProperties(Location.prototype, {
    x: {
      get: function() {
        return this.point.x;
      }
    },
    y: {
      get: function() {
        return this.point.y;
      }
    }
  });
  return Location;
});
