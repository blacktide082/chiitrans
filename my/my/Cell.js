// Generated by CoffeeScript 1.7.1
require(function() {
  var Cell;
  return Cell = (function() {
    Cell.visibleStamp = 1;

    Cell.clearVisibility = function() {
      return this.visibleStamp += 1;
    };

    function Cell() {
      this.terrain = Terrain.WALL;
      this.visibleStamp = 0;
    }

    Cell.prototype.canEnter = function(mob) {
      return this.isPassable() && (this.mob == null);
    };

    Cell.prototype.isPassable = function() {
      var _ref;
      return (_ref = this.terrain) === Terrain.FLOOR || _ref === Terrain.DOOR;
    };

    Cell.prototype.copy = function() {
      var res;
      res = new Cell;
      if (this.terrain != null) {
        res.terrain = this.terrain;
      }
      if (this.mob != null) {
        res.mob = this.mob;
      }
      return res;
    };

    Cell.prototype.isOpaque = function() {
      var _ref;
      return (_ref = this.terrain) === Terrain.WALL || _ref === Terrain.DOOR;
    };

    Cell.prototype.hasObstacle = function() {
      return this.isOpaque() || (this.mob != null);
    };

    Cell.prototype.terrainGlyph = function() {
      switch (this.terrain) {
        case Terrain.WALL:
          return '#';
        case Terrain.DOOR:
          return '+';
        case Terrain.WATER:
          return '~';
        default:
          return '.';
      }
    };

    Cell.prototype.isVisible = function() {
      return this.visibleStamp >= Cell.visibleStamp;
    };

    Cell.prototype.wasVisible = function() {
      return this.visibleStamp > 0;
    };

    Cell.prototype.setVisible = function() {
      return this.visibleStamp = Cell.visibleStamp;
    };

    Cell.prototype.toString = function() {
      if (this.mob != null) {
        return this.mob.toString();
      } else if (this.item != null) {
        return this.item.toString();
      } else {
        return this.terrainGlyph();
      }
    };

    return Cell;

  })();
});
