// Generated by CoffeeScript 1.7.1
require(function(geom) {
  var Minimap;
  return Minimap = (function() {
    Minimap.prototype.tw = 5;

    Minimap.prototype.th = 5;

    function Minimap(el, stage) {
      this.el = el;
      this.stage = stage;
      this.sw = this.stage.w;
      this.sh = this.stage.h;
      this.dw = this.sw * this.tw;
      this.dh = this.sh * this.th;
      this.ctx = getCanvasContext($("<canvas class=\"minimap\" width=\"" + this.dw + "\" height=\"" + this.dh + "\"></canvas>").appendTo(this.el));
      this.ctx.imageSmoothingEnabled = false;
      this.ctx.mozImageSmoothingEnabled = false;
      this.temp = getCanvasContext($("<canvas width=\"" + this.sw + "\" height=\"" + this.sh + "\"></canvas>"));
      this.img = this.temp.createImageData(this.sw, this.sh);
      this.data = this.img.data;
    }

    Minimap.prototype.update = function(redrawAll) {
      var cell, x, y, _i, _j, _ref, _ref1;
      for (y = _i = 0, _ref = this.sh; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = this.sw; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          cell = this.stage.at(pt(x, y));
          if (redrawAll || cell.isVisible()) {
            this.draw(x, y, cell);
          }
        }
      }
      this.temp.putImageData(this.img, 0, 0);
      return this.ctx.drawImage(this.temp.canvas, 0, 0, this.sw, this.sh, 0, 0, this.dw, this.dh);
    };

    Minimap.prototype.draw = function(x, y, cell) {
      var b, g, i, r, _ref;
      _ref = this.getCellColor(cell), r = _ref[0], g = _ref[1], b = _ref[2];
      i = (y * this.sw + x) * 4;
      this.data[i] = r;
      this.data[i + 1] = g;
      this.data[i + 2] = b;
      this.data[i + 3] = 255;
    };

    Minimap.prototype.getCellColor = function(cell) {
      if (!cell.isVisible()) {
        return [0, 0, 0];
      } else if (cell.mob != null) {
        if (cell.mob.isPlayer()) {
          return [0, 255, 0];
        } else {
          return [255, 0, 0];
        }
      } else if (cell.item != null) {
        return [196, 0, 255];
      } else {
        switch (cell.terrain) {
          case Terrain.FLOOR:
            return [128, 128, 128];
          case Terrain.WALL:
            return [40, 40, 40];
          case Terrain.WATER:
            return [80, 80, 255];
          case Terrain.DOOR:
            return [160, 96, 0];
          default:
            throw new Error("WTF?");
        }
      }
    };

    return Minimap;

  })();
});
