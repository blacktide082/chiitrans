// Generated by CoffeeScript 1.7.1
require(function(utils) {
  var Tiles, canvas;
  canvas = function(w, h) {
    var res;
    res = document.createElement('canvas');
    res.width = w;
    res.height = h;
    return res;
  };
  CanvasExtensions.drawTile = function(tile, x, y) {
    return this.tiles.drawTile(this, tile, x, y);
  };
  return Tiles = (function() {
    Tiles.prototype.tw = 32;

    Tiles.prototype.th = 32;

    Tiles.prototype.path = '';

    function Tiles(options) {
      var k, tempCanvas, v;
      if (options != null) {
        for (k in options) {
          v = options[k];
          this[k] = v;
        }
      }
      if (this.path.length > 0 && !this.path.endsWith('/')) {
        this.path += '/';
      }
      this.maxId = 0;
      this.nextId = 0;
      this.loadCounter = 0;
      this.callbacks = [];
      tempCanvas = canvas(this.tw, this.th);
      this.tempCtx = getCanvasContext(tempCanvas);
    }

    Tiles.prototype.allocate = function(w, h) {
      var newCanvas, newCtx;
      this.maxId = w * h;
      newCanvas = canvas(w * this.tw, h * this.th);
      newCtx = getCanvasContext(newCanvas);
      if (this.canvas != null) {
        newCtx.drawImage(this.canvas, 0, 0);
      }
      this.canvas = newCanvas;
      return this.ctx = newCtx;
    };

    Tiles.prototype.getNextId = function() {
      if (this.nextId >= this.maxId) {
        this.allocate((this.maxId + 64) / 8, 8);
      }
      return this.nextId++;
    };

    Tiles.prototype.pos = function(id) {
      var xx, yy;
      xx = (id / 8 | 0) * this.tw;
      yy = (id % 8) * this.th;
      return [xx, yy];
    };

    Tiles.prototype.load = function(src) {
      var id, img, xx, yy, _ref;
      id = this.getNextId();
      _ref = this.pos(id), xx = _ref[0], yy = _ref[1];
      img = new Image;
      img.src = this.path + src;
      img.onload = (function(_this) {
        return function() {
          _this.ctx.drawImage(img, xx, yy, _this.tw, _this.th);
          img.onload = null;
          img = null;
          _this._imageLoaded();
        };
      })(this);
      return id;
    };

    Tiles.prototype.newTile = function(drawFunc) {
      var id, xx, yy, _ref;
      id = this.getNextId();
      if (drawFunc != null) {
        _ref = this.pos(id), xx = _ref[0], yy = _ref[1];
        this.onload(function() {
          return drawFunc(xx, yy);
        });
      }
      this._imageLoaded();
      return id;
    };

    Tiles.prototype.colorMask = function(tile, color) {
      return this.newTile((function(_this) {
        return function(x, y) {
          _this.drawTile(_this.ctx, tile, x, y);
          _this.ctx.save();
          _this.ctx.globalCompositeOperation = 'source-atop';
          _this.ctx.fillStyle = color;
          _this.ctx.fillRect(x, y, _this.tw, _this.th);
          return _this.ctx.restore();
        };
      })(this));
    };

    Tiles.prototype.flipX = function(tile) {
      return this.newTile((function(_this) {
        return function(x, y) {
          _this.tempCtx.save();
          _this.tempCtx.scale(-1, 1);
          _this.drawTile(_this.tempCtx, tile, -_this.tw, 0);
          _this.tempCtx.restore();
          return _this.ctx.drawImage(_this.tempCtx.canvas, x, y);
        };
      })(this));
    };

    Tiles.prototype._imageLoaded = function() {
      var callbacks, cb, _i, _len;
      this.loadCounter += 1;
      if (this.loadCounter >= this.nextId) {
        if (this.callbacks.length > 0) {
          callbacks = this.callbacks;
          this.callbacks = [];
          for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
            cb = callbacks[_i];
            cb();
          }
        }
      }
    };

    Tiles.prototype.onload = function(cb) {
      if (this.loadCounter >= this.nextId) {
        cb();
      } else {
        this.callbacks.push(cb);
      }
    };

    Tiles.prototype.drawTile = function(ctx, tile, x, y) {
      var xx, yy, _ref;
      _ref = this.pos(tile), xx = _ref[0], yy = _ref[1];
      return ctx.drawImage(this.canvas, xx, yy, this.tw, this.th, x, y, this.tw, this.th);
    };

    return Tiles;

  })();
});
