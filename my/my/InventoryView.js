// Generated by CoffeeScript 1.7.1
require(function(geom, Tiles, drag, Command) {
  var InventoryView, ih, iw, th, tiles, tw;
  tw = 32;
  th = 32;
  iw = 35;
  ih = 35;
  tiles = new Tiles({
    tw: tw,
    th: th,
    path: 'res/tiles'
  });
  return InventoryView = (function() {
    InventoryView.prototype.tw = 32;

    InventoryView.prototype.th = 32;

    InventoryView.prototype.backpackWidth = 8;

    function InventoryView(el, inv, ctl) {
      var backCanvas, dragId, floorCanvas, h, ofsx, ofsy, rightColumn, w;
      this.el = el;
      this.inv = inv;
      this.ctl = ctl;
      this.cont = $("<div class=\"inventoryView\"></div>").appendTo(this.el);
      this.eq = getCanvasContext($("<canvas class=\"equip\" width=\"" + (2 * iw) + "\" height=\"" + (4 * ih) + "\"></canvas>").appendTo(this.cont));
      this.eq.tiles = tiles;
      w = this.backpackWidth;
      h = Math.ceil(this.inv.maxItems / w);
      this.back = getCanvasContext($("<canvas class=\"backpack\" width=\"" + (w * iw) + "\" height=\"" + (h * ih) + "\"></canvas>").appendTo(this.cont));
      this.back.tiles = tiles;
      rightColumn = $("<div>").appendTo(this.cont);
      this.floor = getCanvasContext($("<canvas class=\"invFloor\" width=\"" + (2 * iw) + "\" height=\"" + (2 * ih) + "\"></canvas>").appendTo(rightColumn));
      this.floor.tiles = tiles;
      this.trash = $("<div class=\"invTrash\" style=\"width:" + (2 * iw) + "px;height:" + (2 * ih) + "px\"></div>").appendTo(rightColumn);
      this.tile = {};
      this.redraw();
      this.inv.on('change', (function(_this) {
        return function() {
          return _this.redraw();
        };
      })(this));
      this.proxy = $("<canvas width=\"" + tw + "\" height=\"" + th + "\" class=\"dragProxy\" style=\"display:none\"></canvas>").appendTo($('body'));
      this.proxyCtx = getCanvasContext(this.proxy);
      this.proxyCtx.tiles = tiles;
      ofsx = ofsy = null;
      dragId = null;
      backCanvas = $(this.back.canvas);
      backCanvas.dragging({
        start: (function(_this) {
          return function(e, sx, sy) {
            var it, xx, yy, _ref, _ref1;
            _ref = _this.getRelativeCoords(backCanvas, sx, sy), sx = _ref[0], sy = _ref[1];
            dragId = _this.getBackpackSlotFromView(sx, sy);
            it = _this.inv.items[dragId];
            if (it != null) {
              _ref1 = _this.posFromView(sx, sy), xx = _ref1[0], yy = _ref1[1];
              _this.back.clearRect(xx * iw, yy * ih, iw, ih);
              ofsx = sx % iw - 1;
              ofsy = sy % ih - 1;
              _this.proxyCtx.clear();
              _this.proxyCtx.drawTile(_this.getTile(it), 0, 0);
              return _this.proxy.show();
            } else {
              return false;
            }
          };
        })(this),
        click: (function(_this) {
          return function(e, sx, sy) {
            var it, slot, _ref;
            _ref = _this.getRelativeCoords(backCanvas, sx, sy), sx = _ref[0], sy = _ref[1];
            slot = _this.getBackpackSlotFromView(sx, sy);
            it = _this.inv.items[slot];
            if (it != null) {
              return _this.ctl.register(Command.USE, {
                it: it
              });
            }
          };
        })(this),
        drag: (function(_this) {
          return function(e) {
            return _this.proxy.css({
              x: e.pageX - ofsx,
              y: e.pageY - ofsy
            });
          };
        })(this),
        end: (function(_this) {
          return function(e) {
            var newId, tmp, x, y, _ref;
            x = e.pageX, y = e.pageY;
            if (_this.isPointInside(backCanvas, x, y)) {
              _ref = _this.getRelativeCoords(backCanvas, x, y), x = _ref[0], y = _ref[1];
              newId = _this.getBackpackSlotFromView(x, y);
              if ((0 <= newId && newId < _this.inv.maxItems)) {
                tmp = _this.inv.items[newId];
                _this.inv.items[newId] = _this.inv.items[dragId];
                _this.inv.items[dragId] = tmp;
              }
            } else if (_this.isPointInside(floorCanvas, x, y)) {
              _this.ctl.register(Command.GRABTO, {
                slot: dragId
              });
            } else if (_this.isPointInside(_this.trash, x, y)) {
              _this.inv.remove(_this.inv.items[dragId]);
            }
            _this.redrawBackpack();
            return _this.proxy.hide();
          };
        })(this)
      });
      floorCanvas = $(this.floor.canvas);
      floorCanvas.dragging({
        start: (function(_this) {
          return function() {
            if (_this.floorItem != null) {
              _this.floor.clear();
              ofsx = tw / 2;
              ofsy = th / 2;
              _this.proxyCtx.clear();
              _this.proxyCtx.drawTile(_this.getTile(_this.floorItem), 0, 0);
              return _this.proxy.show();
            } else {
              return false;
            }
          };
        })(this),
        click: (function(_this) {
          return function() {
            if (_this.floorItem != null) {
              return _this.ctl.register(Command.GRAB);
            }
          };
        })(this),
        drag: (function(_this) {
          return function(e) {
            return _this.proxy.css({
              x: e.pageX - ofsx,
              y: e.pageY - ofsy
            });
          };
        })(this),
        end: (function(_this) {
          return function(e) {
            var newId, x, y, _ref;
            _this.proxy.hide();
            x = e.pageX, y = e.pageY;
            if (_this.isPointInside(backCanvas, x, y)) {
              _ref = _this.getRelativeCoords(backCanvas, x, y), x = _ref[0], y = _ref[1];
              newId = _this.getBackpackSlotFromView(x, y);
              if ((0 <= newId && newId < _this.inv.maxItems)) {
                _this.ctl.register(Command.GRABTO, {
                  slot: newId
                });
                return;
              }
            } else if (_this.isPointInside(floorCanvas, x, y)) {
              _this.ctl.register(Command.GRAB);
              return;
            }
            return _this.updateFloor(_this.floorItem);
          };
        })(this)
      });
    }

    InventoryView.prototype.redraw = function() {
      this.redrawEquipment();
      return this.redrawBackpack();
    };

    InventoryView.prototype.redrawEquipment = function() {
      var it, slot, tile, _ref;
      this.eq.clear();
      _ref = this.inv.equipment.slots;
      for (slot in _ref) {
        it = _ref[slot];
        if (it != null) {
          tile = this.getTile(it);
          (function(_this) {
            return (function(slot, tile) {
              return tiles.onload(function() {
                var xy;
                xy = _this.getSlotPosition(slot);
                return _this.eq.drawTile(tile, xy.x, xy.y);
              });
            });
          })(this)(slot, tile);
        }
      }
    };

    InventoryView.prototype.redrawBackpack = function() {
      var i, it, tile, _i, _len, _ref;
      this.back.clear();
      _ref = this.inv.items;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        it = _ref[i];
        if (it != null) {
          tile = this.getTile(it);
          (function(_this) {
            return (function(i, tile) {
              return tiles.onload(function() {
                var xy;
                xy = _this.getBackpackPosition(i);
                return _this.back.drawTile(tile, xy.x, xy.y);
              });
            });
          })(this)(i, tile);
        }
      }
    };

    InventoryView.prototype.getTile = function(it) {
      var _base, _name;
      return (_base = this.tile)[_name = it.glyph] != null ? _base[_name] : _base[_name] = tiles.load(it.glyph + '.png');
    };

    InventoryView.prototype.getSlotPosition = function(slot) {
      switch (slot) {
        case 'rightHand':
          return this.itemPos(0, 0);
        case 'leftHand':
          return this.itemPos(1, 0);
        case 'chest':
          return this.itemPos(0, 1);
        case 'head':
          return this.itemPos(1, 1);
        case 'boots':
          return this.itemPos(0, 2);
        case 'amulet':
          return this.itemPos(1, 2);
        case 'ring1':
          return this.itemPos(0, 3);
        case 'ring2':
          return this.itemPos(1, 3);
        default:
          throw new Error('getSlotPosition');
      }
    };

    InventoryView.prototype.getBackpackPosition = function(n) {
      return this.itemPos(n % this.backpackWidth, n / this.backpackWidth | 0);
    };

    InventoryView.prototype.itemPos = function(x, y) {
      return pt(x * iw + 1, y * ih + 1);
    };

    InventoryView.prototype.posFromView = function(x, y) {
      return [x / iw | 0, y / ih | 0];
    };

    InventoryView.prototype.getBackpackSlotFromView = function(x, y) {
      var ix, iy, _ref;
      _ref = this.posFromView(x, y), ix = _ref[0], iy = _ref[1];
      return iy * this.backpackWidth + ix;
    };

    InventoryView.prototype.getRelativeCoords = function(el, x, y) {
      var left, top, _ref;
      _ref = el.offset(), left = _ref.left, top = _ref.top;
      return [x - left, y - top];
    };

    InventoryView.prototype.isPointInside = function(el, x, y) {
      var h, left, top, w, _ref;
      _ref = el.offset(), left = _ref.left, top = _ref.top;
      w = el.width();
      h = el.height();
      return (left <= x && x < left + w) && (top <= y && y < top + h);
    };

    InventoryView.prototype.updateFloor = function(it) {
      var tile;
      if (this.floorItem != null) {
        this.floor.clear();
      }
      this.floorItem = it;
      if (it != null) {
        tile = this.getTile(it);
        tiles.onload((function(_this) {
          return function() {
            return _this.floor.drawTile(tile, iw - tw / 2, ih - th / 2);
          };
        })(this));
      }
    };

    return InventoryView;

  })();
});
